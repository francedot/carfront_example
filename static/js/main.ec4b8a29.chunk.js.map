{"version":3,"sources":["components/Addcar.js","components/Editcar.js","components/Carlist.js","App.js","serviceWorker.js","index.js"],"names":["Addcar","props","useState","open","setOpen","brand","model","color","year","fuel","price","car","setCar","handleClose","addCar","inputChanged","event","target","name","value","Button","style","margin","variant","onClick","Dialog","disableBackdropClick","disableEscapeKeyDown","onClose","aria-labelledby","DialogTitle","id","DialogContent","TextField","autoFocus","onChange","label","fullWidth","DialogActions","Editcar","updateCar","_links","self","href","size","console","log","Carlist","cars","setCars","msg","setMsg","useEffect","getCars","fetch","then","response","json","data","_embedded","catch","err","error","link","method","headers","body","JSON","stringify","_","columns","Header","accessor","Cell","row","original","filterable","sortable","minWidth","window","confirm","defaultPageSize","Snackbar","autoHideDuration","message","App","className","AppBar","position","Toolbar","Typography","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec4b8a29.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function Addcar(props) {\n  const [open, setOpen] = useState(false);\n  const [car, setCar] = useState({brand: '', model: '', color: '', year: '', fuel: '', price: ''});\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    props.addCar(car);\n    setOpen(false);\n  }\n\n  const handleCancel = () => {\n    setOpen(false);\n  }\n\n  const inputChanged = (event) => {\n    setCar({...car, [event.target.name]: event.target.value});\n  }\n\n  return(\n    <div>\n      <Button style={{margin: 10}} variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Add car\n      </Button>\n      <Dialog open={open} disableBackdropClick={true} disableEscapeKeyDown={true} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">New car</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"brand\"\n            name=\"brand\"\n            value={car.brand}\n            onChange={inputChanged}\n            label=\"Brand\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"model\"\n            name=\"model\"\n            value={car.model}\n            onChange={inputChanged}\n            label=\"Model\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"color\"\n            name=\"color\"\n            value={car.color}\n            onChange={inputChanged}\n            label=\"Color\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"fuel\"\n            name=\"fuel\"\n            value={car.fuel}\n            onChange={inputChanged}\n            label=\"Fuel\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"year\"\n            name=\"year\"\n            value={car.year}\n            onChange={inputChanged}\n            label=\"Year\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"price\"\n            name=\"price\"\n            value={car.price}\n            onChange={inputChanged}\n            label=\"Price (â‚¬)\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>    \n    </div>\n  )\n}","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function Editcar(props) {\n  const [open, setOpen] = useState(false);\n  const [car, setCar] = useState({brand: '', model: '', color: '', year: '', fuel: '', price: ''});\n\n  const handleClickOpen = () => {\n    console.log(props.car);\n    setCar({brand: props.car.brand, model: props.car.model, color: props.car.color,\n            fuel: props.car.fuel, year: props.car.year, price: props.car.price });\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    props.updateCar(props.car._links.self.href, car);\n    setOpen(false);\n  }\n\n  const handleCancel = () => {\n    setOpen(false);\n  }\n\n  const inputChanged = (event) => {\n    setCar({...car, [event.target.name]: event.target.value});\n  }\n\n  return(\n    <div>\n      <Button size=\"small\" color=\"primary\" onClick={handleClickOpen}>\n        Edit\n      </Button>\n      <Dialog open={open} disableBackdropClick={true} disableEscapeKeyDown={true} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Edit existing car</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"brand\"\n            name=\"brand\"\n            value={car.brand}\n            onChange={inputChanged}\n            label=\"Brand\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"model\"\n            name=\"model\"\n            value={car.model}\n            onChange={inputChanged}\n            label=\"Model\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"color\"\n            name=\"color\"\n            value={car.color}\n            onChange={inputChanged}\n            label=\"Color\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"fuel\"\n            name=\"fuel\"\n            value={car.fuel}\n            onChange={inputChanged}\n            label=\"Fuel\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"year\"\n            name=\"year\"\n            value={car.year}\n            onChange={inputChanged}\n            label=\"Year\"\n            fullWidth\n          />\n          <TextField\n            margin=\"dense\"\n            id=\"price\"\n            name=\"price\"\n            value={car.price}\n            onChange={inputChanged}\n            label=\"Price (â‚¬)\"\n            fullWidth\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleClose} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>    \n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport ReactTable from 'react-table-v6';\nimport 'react-table-v6/react-table.css';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Addcar from './Addcar';\nimport Editcar from './Editcar';\n\nexport default function Carlist() {\n  const [cars, setCars] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [msg, setMsg] = useState('');\n\n  useEffect(() => {\n    getCars();\n  }, [])\n\n  const getCars = () => {\n    fetch('https://carstockrest.herokuapp.com/cars')\n    .then(response => response.json())\n    .then(data => setCars(data._embedded.cars))\n    .catch(err => console.error(err))\n  }\n\n  const deleteCar = (link) => {\n    if (window.confirm('Are you sure?')) {\n      fetch(link, {method: 'DELETE'})\n      .then(_ => getCars())\n      .then(_ => {\n        setMsg('Car deleted');\n        setOpen(true);\n      })\n      .catch(err => console.error(err))\n    }\n  }\n\n  const addCar = (car) => {\n    fetch('https://carstockrest.herokuapp.com/cars',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type':'application/json'\n        },\n        body: JSON.stringify(car)\n      }\n    )  \n    .then(_ => getCars())\n    .then(_ => {\n      setMsg('New car added');\n      setOpen(true);\n    })\n    .catch(err => console.error(err))  \n  }\n\n  const updateCar = (link, car) => {\n    fetch(link, {\n      method: 'PUT',\n      headers: {\n        'Content-Type':'application/json'\n      },\n      body: JSON.stringify(car)\n    })\n    .then(_ => getCars())\n    .then(_ => {\n      setMsg('Car updated');\n      setOpen(true);\n    })\n    .catch(err => console.error(err))  \n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  const columns = [\n    {\n      Header: 'Brand',\n      accessor: 'brand'\n    },\n    {\n      Header: 'Model',\n      accessor: 'model'\n    },    \n    {\n      Header: 'Color',\n      accessor: 'color'\n    }, \n    {\n      Header: 'Year',\n      accessor: 'year'\n    },    \n    {\n      Header: 'Fuel',\n      accessor: 'fuel'\n    },\n    {\n      Header: 'Price (â‚¬)',\n      accessor: 'price'\n    },\n    {\n      Cell: row => (<Editcar car={row.original} updateCar={updateCar} />)\n    },\n    {\n      accessor: '_links.self.href',\n      filterable: false,\n      sortable: false,\n      minWidth: 60,\n      Cell: row => (<Button color=\"secondary\" size=\"small\" onClick={() => deleteCar(row.value)}>Delete</Button>)\n    }\n  ]\n\n  return(\n    <div>\n      <Addcar addCar={addCar}/>\n      <ReactTable filterable={true} defaultPageSize={10} \n        data={cars} columns={columns} />\n      <Snackbar open={open} autoHideDuration={3000} \n        onClose={handleClose} message={msg} />\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport Carlist from './components/Carlist';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">\n            CarShop\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Carlist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}